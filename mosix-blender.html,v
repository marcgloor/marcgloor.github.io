head	1.16;
access;
symbols;
locks
	gloor:1.16; strict;
comment	@# @;


1.16
date	2020.11.21.11.13.30;	author gloor;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.07.19.32.56;	author gloor;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.07.19.31.32;	author gloor;	state Exp;
branches;
next	1.13;

1.13
date	2005.09.27.00.47.20;	author gloor;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.05.21.34.25;	author gloor;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.19.13.57.47;	author gloor;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.13.22.43.19;	author gloor;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.20.18.02.00;	author gloor;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.15.10.39.26;	author gloor;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.13.22.38.40;	author gloor;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.31.22.59.57;	author gloor;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.06.19.51.06;	author gloor;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.08.18.32.06;	author gloor;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.01.13.26.27;	author gloor;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.01.11.26.53;	author gloor;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.01.09.59.15;	author gloor;	state Exp;
branches;
next	;


desc
@@


1.16
log
@*** empty log message ***
@
text
@<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <meta name="GENERATOR"
 content="Mozilla/4.73 [en] (X11; I; Linux 2.2.17 i686) [Netscape]">
  <meta name="author" content="Marc Gloor">
  <title>blender loadbalancing on a mosix cluster</title>
</head>
<body text="#000000" bgcolor="#ffffff" link="#0000ef" vlink="#51188e"
 alink="#ff0000">
<b><font size="+1">Blender load balancing
workload manager</font></b>
<br>
by Marc O. Gloor
<br>
<hr width="100%">
<p><b>Abstract</b>
</p>
<p>The <i>render.sh</i> command is a simple shellscript which
automatically divides
a blender sequence into a subset of single jobs to turn it over to the
mosix load balancing workload manager (also known as mosix job
scheduler).
<br>
&nbsp;
</p>
<p><b>Rendering blender sequences on a mosix cluster</b>
</p>
<p>If you have access to a full featured <a href="http://www.mosix.org">mosix
cluster</a> for running your jobs on a fast cluster in parallel,
together
with blender, there is no reason to install some other render daemons
to
use the capabilities of your cluster environment. A <a
 href="http://www.blender.org">blender</a>
model scene (also called a sequence) is divisible into several parts,
e.g.
a sequence containing 1000 images is divisible into two parts of 500
images
(1-500 and 501-1000). Therefore, after a short process migration delay,
these packages can be rendered by blender on different nodes about 90%
faster. The speed advantage is dependent of the used hardware
components
and network technology.
</p>
<p>Starting these two jobs manually from the commandline on a 2-node
cluster:
</p>
<blockquote><tt>root@@masternode# blender -b scene.blend -s 0 -e 500 -a
&amp;</tt>
  <br>
  <tt>root@@masternode# blender -b scene.blend -s 501 -e 1000 -a &amp;</tt></blockquote>
<p><br>
...or the easy way, by a shellscript which produce some different
rendering commands without manually dividing the no. of pictures in
relation
to nodes. On a two node cluster this is a simple task but it becomes
more
difficult on systems using more than 2 nodes.
<br>
&nbsp;
</p>
<p><b>The <i>render</i> command itself</b>
</p>
<p>This render-script example below will render 1000 images from
scene.blend
on 2 nodes:
</p>
<blockquote><tt>root@@masternode# render.sh scene.blend 0 1000 2</tt></blockquote>
<p><br>
Next example will render 800 images from scene.blend beginning from
image 200 on 4 nodes:
</p>
<blockquote><tt>root@@masternode# render scene.blend 200 1000 4</tt></blockquote>
<p><br>
Next example will render 5000 images from scene.blend on 16 nodes:
</p>
<blockquote><tt>root@@masternode# render.sh scene.blend 0 5000 16</tt></blockquote>
<p><br>
Last example will also render 5000 images from scene.blend on 16
nodes (2jobs/node):
</p>
<blockquote><tt>root@@masternode# render.sh scene.blend 0 5000 32</tt></blockquote>
<p><br>
After starting a <i>render</i> job without a following ampersand
(&amp;) on a cluster, it appears the following output:
</p>
<blockquote><tt>Rendering 1000 images from scene.blend on 16 nodes.</tt>
  <br>
  <tt>Tasks forked, network rendering in progress.</tt>
  <br>
  <tt>Job started at: 16-01-01 23:12:06</tt>
  <br>
  <tt>Please wait while rendering...</tt>
  <br>
  <tt>Rendering successfully finished.</tt>
  <br>
  <tt>Job ended at: 16-01-01 23:16:15</tt></blockquote>
<p><br>
You may start your <i>render </i>job in the background using an
ampersand, redirecting the standard output to a file. So after a while,
you can check the status from the job (finished or running) which was
written
to /<tt>tmp/scene.blend.status</tt>:
</p>
<blockquote><tt>root@@masternode# render.sh scene.blend 0 5000 32 &gt;
/tmp/scene.blend.status
&amp;</tt></blockquote>
<p><br>
Another idea is an notification by e-mail if the job was finished
successfully, like example below:
</p>
<blockquote><tt>root@@masternode# render.sh scene.blend 0 5000 32 | mail
-s
"render status" you@@host &amp;</tt></blockquote>
<p><br>
If you would like to know how many images are finished while rendering,
a simple <tt>'ls -l | wc -l' will display the no. of images currently
rendered.
</tt>In
my case, the render command works fine rendering blender scenes on my
mosix
cluster. Note that on scenes containing less than 50 images, it makes
no
sense using the <i>render </i>command except the calculation of an
image
takes a while.
<br>
&nbsp;
</p>
<p><b>Requirements</b>
</p>
<ul>
  <li>
a running mosix cluster</li>
  <li>
on the main-system an installed <i>render</i> command</li>
  <li>
tested with the bourne again shell (other shells untested)</li>
</ul>
<p><br>
<b>License</b>
</p>
<p>The distribution is licensed under the GNU General Public License.
<br>
&nbsp;
</p>
<p><b>Installation</b>
</p>
<p>Download render.sh, set permission to 755 (chmod 755 render.sh or
chmod +x render.sh)
and run this command using your blender scene.<br>
&nbsp;
</p>
<p><b>Download</b>
</p>
<blockquote><a href="data/render.sh">render.sh [.sh, 2kb]</a></blockquote>
<hr width="100%">
<table border="0" cellspacing="0" cellpadding="0" cols="2" width="100%"
 nosave="">
  <tbody>
    <tr nosave="">
    </tr>
  </tbody><tbody>
    <tr nosave="">
      <td width="90%" nosave="">
      <pre style="font-family: times new roman,times,serif;"><i>$Id: mosix-blender.html,v 1.15 2006/03/07 19:32:56 gloor Exp gloor $<br>Author:</i><i> <a
 href="mailto:marc_dot_gloor_at_u_dot_nus_dot_edu">marc_dot_gloor_at_u_dot_nus_dot_edu</a></i></pre>
      <br>
      <i> </i> <dt> <br>
      </dt>
      </td>
      <td valign="top" nosave="">
      <div align="right"><i><a href="index.html">home</a></i></div>
      </td>
    </tr>
  </tbody>
</table>
</body>
</html>
@


1.15
log
@*** empty log message ***
@
text
@d169 2
a170 2
      <pre style="font-family: times new roman,times,serif;"><i>$Id: mosix-blender.html,v 1.14 2006/03/07 19:31:32 gloor Exp gloor $<br>Author:</i><i> <a
 href="mailto:mgloor_at_fhzh_dot_ch">mgloor_at_fhzh_dot_ch</a></i></pre>
@


1.14
log
@*** empty log message ***
@
text
@d137 1
a137 1
a interconnected and running mosix cluster</li>
d169 1
a169 1
      <pre style="font-family: times new roman,times,serif;"><i>$Id: mosix-blender.html,v 1.13 2005/09/27 00:47:20 gloor Exp gloor $<br>Author:</i><i> <a
@


1.13
log
@*** empty log message ***
@
text
@a136 2
blender must be installed on every node</li>
  <li>
d169 1
a169 1
      <pre style="font-family: times new roman,times,serif;"><i>$Id: mosix-blender.html,v 1.12 2005/08/05 21:34:25 gloor Exp gloor $<br>Author:</i><i> <a
@


1.12
log
@*** empty log message ***
@
text
@d171 2
a172 2
      <pre style="font-family: times new roman,times,serif;"><i>$Id: mosix-blender.html,v 1.11 2004/02/19 13:57:47 gloor Exp gloor $<br>Author:</i><i> <a
 href="mailto:mgloor@@fhzh.ch">mgloor@@fhzh.ch</a></i></pre>
@


1.11
log
@*** empty log message ***
@
text
@d1 1
a1 1
<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
d4 6
a9 4
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.73 [en] (X11; I; Linux 2.2.17 i686) [Netscape]">
   <meta name="author" content="Marc Gloor">
   <title>blender loadbalancing on a mosix cluster</title>
d11 3
a13 2
<body text="#000000" bgcolor="#FFFFFF" link="#0000EF" vlink="#51188E" alink="#FF0000">
<b><font size=+1>Blender load balancing
a14 1
<br>by Marc O. Gloor
d16 3
a18 1
<hr WIDTH="100%">
d20 3
a22 1
<p>The <i>render</i> command is a shellscript which automatically divides
d24 5
a28 2
mosix load balancing workload manager (also known as mosix job scheduler).
<br>&nbsp;
d30 1
d32 10
a41 5
cluster</a> for running your jobs on a fast cluster in parallel, together
with blender, there is no reason to install some other render daemons to
use the capabilities of your cluster environment. A <a href="http://www.blender.org">blender</a>
model scene (also called a sequence) is divisible into several parts, e.g.
a sequence containing 1000 images is divisible into two parts of 500 images
d44 2
a45 1
faster. The speed advantage is dependent of the used hardware components
d47 4
a50 1
<p>Starting these two jobs manually from the commandline on a 2-node cluster:
d53 8
a60 5
<br><tt>root@@masternode# blender -b scene.blend -s 501 -e 1000 -a &amp;</tt></blockquote>

<p><br>...or the easy way, by a shellscript which produce some different
rendering commands without manually dividing the no. of pictures in relation
to nodes. On a two node cluster this is a simple task but it becomes more
d62 3
a64 1
<br>&nbsp;
d66 3
a68 1
<p>This render-script example below will render 1000 images from scene.blend
d70 4
a73 3
<blockquote><tt>root@@masternode# render scene.blend 0 1000 2</tt></blockquote>

<p><br>Next example will render 800 images from scene.blend beginning from
d75 1
d77 6
a82 5

<p><br>Next example will render 5000 images from scene.blend on 16 nodes:
<blockquote><tt>root@@masternode# render scene.blend 0 5000 16</tt></blockquote>

<p><br>Last example will also render 5000 images from scene.blend on 16
d84 4
a87 3
<blockquote><tt>root@@masternode# render scene.blend 0 5000 32</tt></blockquote>

<p><br>After starting a <i>render</i> job without a following ampersand
d89 1
d91 12
a102 7
<br><tt>Tasks forked, network rendering in progress.</tt>
<br><tt>Job started at: 16-01-01 23:12:06</tt>
<br><tt>Please wait while rendering...</tt>
<br><tt>Rendering successfully finished.</tt>
<br><tt>Job ended at: 16-01-01 23:16:15</tt></blockquote>

<p><br>You may start your <i>render </i>job in the background using an
d104 2
a105 1
you can check the status from the job (finished or running) which was written
d107 3
a109 1
<blockquote><tt>root@@masternode# render scene.blend 0 5000 32 > /tmp/scene.blend.status
d111 2
a112 2

<p><br>Another idea is an notification by e-mail if the job was finished
d114 3
a116 1
<blockquote><tt>root@@masternode# render scene.blend 0 5000 32 | mail -s
d118 4
a121 3

<p><br>If you would like to know how many images are finished while rendering,
a simple <tt>'ls -l | wc -l' will display the no. of images currently rendered.
d123 6
a128 3
my case, the render command works fine rendering blender scenes on my mosix
cluster. Note that on scenes containing less than 50 images, it makes no
sense using the <i>render </i>command except the calculation of an image
d130 3
a132 1
<br>&nbsp;
d134 1
d136 1
a136 1
<li>
d138 1
a138 2

<li>
d140 1
a140 2

<li>
d142 1
a142 2

<li>
d145 3
a147 2

<p><br><b>License</b>
d149 3
a151 1
<br>&nbsp;
d153 6
a158 4
<p>Uncompress render.gz (gzip -d), set e.g. permission to 755 (chmod 755)
and move it to /usr/bin. Because the <i>render</i> command is self explaining
and easy to use, there is no man page available.
<br>&nbsp;
d160 9
a168 5
<blockquote><a href="data/render.gz">render.gz [.gz, 1kb]</a></blockquote>

<hr WIDTH="100%">
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 COLS=2 WIDTH="100%" NOSAVE >
<tr NOSAVE>  <tbody>
d171 4
a174 2
      <pre style="font-family: times new roman,times,serif;"><i>$Id:$<br>Author:</i><i> <a href="mailto:mgloor@@fhzh.ch">mgloor@@fhzh.ch</a></i></pre><br>
      <i> </i> <dt>
a182 1

@


1.10
log
@*** empty log message ***
@
text
@d6 1
a6 1
   <meta name="Author" content="Marc O. Gloor">
d114 12
a125 19
<tr NOSAVE>
<td WIDTH="90%" NOSAVE>
<dt>
<i>$Id: mosix-blender.html,v 1.9 2003/02/20 18:02:00 gloor Exp gloor $</i></dt>

<dt>
<i>Author: <a href="mailto:mgloor@@fhzh.ch">mgloor@@fhzh.ch</a></i></dt>
</td>

<td VALIGN=TOP NOSAVE>
<div align=right><i><a href="index.html">home</a></i></div>
</td>
</tr>

<tr>
<td></td>

<td></td>
</tr>
@


1.9
log
@*** empty log message ***
@
text
@d24 1
a24 1
use the capabilities of your cluster environment. A <a href="http://www.blender.nl">blender</a>
d101 1
a101 1
<p><br><b>License</b><b></b>
d117 2
a118 1
<i>$Id$</i></dt>
d121 2
@


1.8
log
@reviesed
@
text
@d117 3
a119 4
<i>$Id: mosix-blender.html,v 1.7 2003/02/13 22:38:40 gloor Exp gloor $</i></dt>

<br><i>Author: <a href="mailto:mgloor@@fhzh.ch">mgloor@@fhzh.ch</a></i></td>

@


1.7
log
@save of today's work
@
text
@d117 1
a117 1
<i>$Id: mosix-blender.html,v 1.6 2003/01/31 22:59:57 gloor Exp gloor $</i></dt>
d119 1
a119 1
<br><i>Author: <a href="mailto:mgloor@@fhzh.ch">Marc O. Gloor</a></i></td>
@


1.6
log
@*** empty log message ***
@
text
@d10 2
a11 2
<b><font size=+1>Rendering blender
sequences on a mosix cluster</font></b>
d15 16
a30 10
<p><b>render balancing on a mosix cluster</b>
<p>If you are running a full featured <a href="http://www.mosix.org">mosix
cluster</a>, together with blender, there is no reason for installing some
other render daemons to use the capabilities of your cluster environment.
A <a href="http://www.blender.nl">blender</a> model scene or sequence is
splittable into small parts, e.g. a scene containing 1000 images is splittable
into two parts of 500 images (1-500 and 501-1000). Therefore, after a short
process migration delay, these two parts be going to be rendered by blender
on different nodes about 90% faster. The speed advantage is dependent of
the used hardware components and network technology.
d41 1
a41 4
<p><b>The <i>render</i> command</b>
<p>The <i>render</i> command is a simple shellscript which automatically
divides these tasks into a set of single running jobs for the mosix process
migration and load balancing scheduler.
d101 4
a104 1
<p><br><b>Installation</b>
d110 1
a110 1
<blockquote><tt><a href="data/render.gz">render.gz</a></tt> <tt>(MD5:981039a21765b0687585197d2d6facb2)</tt></blockquote>
a111 1
<p><br>
d117 1
a117 1
<i>$Id: mosix-blender.html,v 1.5 2002/10/06 19:51:06 gloor Exp gloor $</i></dt>
d119 1
a119 1
<br><i>Author: <a href="mailto:mgloor_removespam@@freesurf.ch">Marc O. Gloor</a></i></td>
@


1.5
log
@revised, bugs fixed
@
text
@d11 1
a11 1
scenes on a mosix cluster</font></b>
d112 1
a112 1
<i>$Id: mosix-blender.html,v 1.4 2002/09/08 18:32:06 gloor Exp $</i></dt>
@


1.4
log
@*** empty log message ***
@
text
@a11 1
<br>Licensed under the GPL
d112 1
a112 1
<i>$Id$</i></dt>
@


1.3
log
@*** empty log message ***
@
text
@d113 1
a113 1
$Id: mosix-blender.html,v 1.2 2002/09/01 11:26:53 gloor Exp gloor $</dt>
d115 1
a115 1
<br>Author: <a href="mailto:mgloor_removespam@@freesurf.ch">Marc O. Gloor</a></td>
d118 1
a118 1
<div align=right><a href="http://www.unilec.org/mgloor/index.html">home</a></div>
d120 6
@


1.2
log
@*** empty log message ***
@
text
@d5 1
a5 1
   <meta name="GENERATOR" content="Mozilla/4.76 [en] (X11; U; Linux 2.2.16 i686) [Netscape]">
d105 1
a105 1
<blockquote><tt><a href="render.gz">render.gz</a></tt> <tt>(MD5:981039a21765b0687585197d2d6facb2)</tt></blockquote>
d111 5
a115 3
<td WIDTH="90%" NOSAVE><dt>$Id$</dt>
<br>Author: <a href="mailto:mgloor_removespam@@freesurf.ch">Marc O. Gloor</a></td
>
d118 1
a118 2
<div align=right><a href="http://www.unilec.org/mgloor/index.html">home</a></div
>
@


1.1
log
@Initial revision
@
text
@d111 1
a111 1
<td WIDTH="90%" NOSAVE>$Id$ (RCS)
@
