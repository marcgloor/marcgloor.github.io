head	1.20;
access;
symbols;
locks; strict;
comment	@# @;


1.20
date	2020.11.21.11.13.30;	author gloor;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.27.00.47.03;	author gloor;	state Exp;
branches;
next	1.18;

1.18
date	2004.10.06.19.24.41;	author gloor;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.19.13.57.47;	author gloor;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.11.17.25.49;	author gloor;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.08.18.22.57;	author gloor;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.20.18.02.00;	author gloor;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.15.10.39.13;	author gloor;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.13.22.38.40;	author gloor;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.31.22.59.57;	author gloor;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.21.13.29.05;	author gloor;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.24.20.31.53;	author gloor;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.15.20.41.07;	author gloor;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.13.13.19.37;	author gloor;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.06.21.01.11;	author gloor;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.06.19.51.06;	author gloor;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.06.19.42.51;	author gloor;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.22.20.00.27;	author gloor;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.22.19.56.36;	author gloor;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.22.19.07.08;	author gloor;	state Exp;
branches;
next	;


desc
@initial release, checked in to rcs
@


1.20
log
@*** empty log message ***
@
text
@<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <meta name="author" content="Marc Gloor">
  <meta name="GENERATOR"
 content="Mozilla/4.73 [en] (X11; I; Linux 2.2.17 i686) [Netscape]">
  <title>bsengine - black/scholes derivative option pricing engine</title>
</head>
<body text="#000000" bgcolor="#ffffff" link="#0000ef" vlink="#51188e"
 alink="#ff0000">
<b><font size="+1">bsengine - a derivative option pricing backend</font></b> <br>
by Marc O. Gloor <br>
<hr width="100%">
<p><img src="data/bs.png" alt="screenshot of bsengine" hspace="5"
 nosave="" height="342" width="492" align="right"><b>Abstract</b> </p>
<p>Bsengine computes the fair value of european style options based on
the current stock price. Aditionally, several computations are given;
greeks, spread, breakeven, Omega, Gear, Rho. It uses the option pricing
algorithm of Black, F. and Scholes, M,&nbsp; the architects of the
option pricing model. The software was written in C on a SUN
workstation, its primary design was to run as a backoffice processor.
The code itself was optimized for running under the Linux operating
system. However, the author has built this software successfully on
Windoze, but just for testing purposes and not for productional use
because of well known operating system deficits.<br>
&nbsp; </p>
<p><b>Design goal</b> </p>
<p>Initial reason that I wrote this software was my personal
requirement that I needed a software which should be able to receive
data from a stock exchange server which can be used for recruiting
warrants considering my personal and individual risk profile. An
additional design goal was that the system should be independent of
slow represented online banking websites containing advertisements and
other crap. Third and most important reason for writing the software
was the cognition of finding inconsistent product informations and
miscalculations on the website from my broker. I don't really trust
these kind of online banking systems currently around. Investing my
money trusting my own calculations is the way I like. Bsengine was
typically designed for industrial processing of batch data e.g. to
compute and populate a broker website automatically (e.g. similar like
Swissquote or Consors sites). The bsengine kernel includes a plain CLI
interface and the system was designed to be modular and fast. An
advantage of this concept is that the software can be used unattended as
a part of a huge batch processing concept. If you like to hack a Gtk+ 
frontend around the kernel, fell free! </p>
<p><br>
<span style="font-weight: bold;">Postprocessing notes</span><br>
<br>
Once the mathematical calculation based on a complex derivative option
pricing model has been finished, bsengine will write its results to
stdout(), normally to a computer screen. The standard output method of
bsengine is a token separated data-string which can easily be parsed
from a productional batch processing subprocess. Using this facility,
the token separated string given from bsengine is loaded in to a
relational database management backend system (RDBMS) for further post
processing of the data (e.g. a <a href="http://www.mysql.com">mySQL
database server</a>). I wrote an additional application called bscat
(bsengine catalog) which reads bsengine's output from stdout via Unix
pipe into stdin and prepares a new output in a human readable format (a
shown in screenshot above). <br>
&nbsp; </p>
<p><b>Technical notes</b> </p>
<p>The bsengine kernel and bscat was fully written in C and should be
easily portable to other Unix environments or operating systems which
supports pipes. I developped the software on a SUN Sparc 5 running
GNU/Linux. To compute the implied volatility, a fast approximation
formula was required. I use the "Newton-Raphson" algorithm to
numerically determing the volatility of an option using the generalized
Black-Scholes model, given its market price. The "Manaster and Koehler"
algorithm is responsible for the initial value used for iterations, this
is the main reason, that bsengine is very fast computing option prices.
Bsengine was tested hours and hours by feeding in real time data from a
trading system. This software is ready for productional use, please note
that the bsengine package was published under the terms of the <a
 href="http://www.opensource.org">GNU General Public License</a> which
clearly implies, that this software comes without any warranty.<br>
&nbsp; </p>
<p><b>Future plans and additional feautures</b> </p>
<p>Basically, no software is finished and bsengine is a release of my
development source tree of bsengine, in other words it's a WIP (work in
progress) snapshot. I plan to expand the capabilites of bsengine as soon
I get access to a free or favourable stock exchange interface. To find
an adequate offer is a real problem and this is the main reason why
further development of besengine has been terminated. Computing option
prices has to be in real-time. However, current status of bsengine is
that the software is fast and well working. If you have any suggestions,
comments or contributions, feel free to get in touch with me by sending
me an <a href="mailto:marc_dot_gloor_at_u_dot_nus_dot_edu">email</a>. <br>
&nbsp; </p>
<p><b>Examples of bsengine and bscat in action</b> </p>
<p><tt>gloor@@node1$ ./bsengine -h</tt> <br>
<tt>bsengine 1.0.0 - Black/Scholes Option pricing (UNIX)</tt> <br>
<tt>written by Marc O. Gloor &lt;marc_dot_gloor_at_u_dot_nus_dot_edu&gt;</tt> </p>
<p><tt>&nbsp;usage&nbsp; : bsengine [options] [arguments]</tt> <br>
<tt>&nbsp;example: bsengine -v c 6024.2 8000 4.0 20.10.2002 500 0.02
0.03</tt> </p>
<p><tt>&nbsp;options are:</tt> <br>
<tt>&nbsp; -h&nbsp; show
help&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-v&nbsp; compute priced volatility</tt> <br>
<tt>&nbsp; -r&nbsp; show
release&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-p&nbsp; compute fair price</tt> </p>
<p><tt>&nbsp;-v arguments are (in correct order):&nbsp;&nbsp; -p
arguments are (in correct order):</tt> <br>
<tt>&nbsp; -1st&nbsp; Call/Put flag
[c/p]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-1st&nbsp; Call/Put flag [c/p]</tt> <br>
<tt>&nbsp; -2nd&nbsp; Underlying price
[dec]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-2nd&nbsp; Underlying price [dec]</tt> <br>
<tt>&nbsp; -3rd&nbsp; Strike price
[dec]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-3rd&nbsp; Strike price [dec]</tt> <br>
<tt>&nbsp; -4th&nbsp; Interest Rate in %
[dec]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -4th&nbsp;
Interest Rate in % [dec]</tt> <br>
<tt>&nbsp; -5th&nbsp; T.t. Maturity
[dd.mm.yyyy]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -5th&nbsp; T.t.
Maturity [dd.mm.yyyy]</tt> <br>
<tt>&nbsp; -6th&nbsp; Options ratio
[dec]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-6th&nbsp; Options ratio [dec]</tt> <br>
<tt>&nbsp; -7th&nbsp; Bid price
[dec]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-7th&nbsp; Given volatility in % [dec]</tt> <br>
<tt>&nbsp; -8th&nbsp; Ask price [dec]</tt> <br>
&nbsp; </p>
<p>For productional environments, for example you intend to populate a
relational database using following command: <br>
<tt>gloor@@node1$ ./bsengine -v c 6024.2 8000 4.0 20.10.2002 500 0.02
0.02</tt> </p>
<p>Here is an example of the semicolon separated data output: <br>
<tt>22-09-2002;20:08:12;C;6024.20;8000.00;500;28;4.0%;0.03;55.63%;-24.7%;...</tt> </p>
<p>Here is an example of the bsengine and bscat working together (e.g.
assembling a website using a CGI script): </p>
<p><tt>gloor@@node1$ bsengine -v c 6024.2 8000 4.0 20.10.2002 500 0.02
0.03 | bscat</tt> <br>
<tt>&nbsp;+---------------------------------------------------------------------------+</tt> <br>
<tt>&nbsp;| Date: 22-09-2002 | Time: 20:09:08&nbsp;&nbsp; | Rate:
4.0%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | TTM:
28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</tt> <br>
<tt>&nbsp;|------------------+------------------+------------------+------------------|</tt> <br>
<tt>&nbsp;| Share: 6024.20&nbsp;&nbsp; | Strk:
8000.00&nbsp;&nbsp;&nbsp; | Ratio:
500&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Type:
C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</tt> <br>
<tt>&nbsp;|------------------+------------------+------------------+------------------|</tt> <br>
<tt>&nbsp;| I-Val: 0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | T-Val:
0.03&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Price:
0.03&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | InOut: -24.7%&nbsp;&nbsp;&nbsp; |</tt> <br>
<tt>&nbsp;|------------------+------------------+------------------+------------------|</tt> <br>
<tt>&nbsp;| Prem: 33.05%&nbsp;&nbsp;&nbsp;&nbsp; | Pre/Y:
1179.91%&nbsp; | Sprd: 33.3%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | SprdM:
119.8&nbsp;&nbsp;&nbsp;&nbsp; |</tt> <br>
<tt>&nbsp;|------------------+------------------+------------------+------------------|</tt> <br>
<tt>&nbsp;| Delta: 0.04&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Gear:
401.61&nbsp;&nbsp;&nbsp;&nbsp; | Omega: 16.77&nbsp;&nbsp;&nbsp;&nbsp; |
Vola: 55.63%&nbsp;&nbsp;&nbsp;&nbsp; |</tt> <br>
<tt>&nbsp;|------------------+------------------+------------------+------------------|</tt> <br>
<tt>&nbsp;| Gamma: 0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Theta:
-1.52&nbsp;&nbsp;&nbsp;&nbsp; | Vega:
1.50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Rho:
0.18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</tt> <br>
<tt>&nbsp;|------------------+------------------+------------------+------------------|</tt> <br>
<tt>&nbsp;| B/E: 8015.00&nbsp;&nbsp;&nbsp;&nbsp; |
Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</tt> <br>
<tt>&nbsp;|------------------+------------------+------------------+------------------|</tt> <br>
<tt>&nbsp;|
Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|
Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</tt> <br>
<tt>&nbsp;+---------------------------------------------------------------------------+</tt> <br>
&nbsp; </p>
<p><span style="font-weight: bold;">Data field description</span> </p>
<p><tt>Date:&nbsp;&nbsp; timestamp
date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pre/Y:&nbsp; premium per annum</tt> <br>
<tt>Time:&nbsp;&nbsp; timestamp
time&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Sprd:&nbsp;&nbsp; spread</tt> <br>
<tt>Rate:&nbsp;&nbsp; interest
rate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SprdM:&nbsp; spread Move</tt> <br>
<tt>TTM:&nbsp;&nbsp;&nbsp; time to
maturity&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Delta:&nbsp; delta</tt> <br>
<tt>Share:&nbsp; share
price&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gear:&nbsp;&nbsp; gearing</tt> <br>
<tt>Strk:&nbsp;&nbsp; options strike
price&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Omega:&nbsp; omega</tt> <br>
<tt>Ratio:&nbsp; options
ratio&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Vola:&nbsp;&nbsp; implied volatility</tt> <br>
<tt>Type:&nbsp;&nbsp; type
(Call/Put)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gamma:&nbsp; gamma</tt> <br>
<tt>I-Val:&nbsp; internal
value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Theta:&nbsp; theta</tt> <br>
<tt>T-Val:&nbsp; time
value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Vega:&nbsp;&nbsp; vega</tt> <br>
<tt>Price:&nbsp; Options faire
price&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rho:&nbsp;&nbsp;&nbsp; rho</tt> <br>
<tt>InOut:&nbsp; In/Out of the
money&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B/E:&nbsp;&nbsp;&nbsp; break
even</tt> <br>
<tt>Prem:&nbsp;&nbsp; premium</tt> <br>
&nbsp; </p>
<p><b>Benchmark</b> </p>
<p>The result of a computing simulation of 20'000 options prices was
displayed in seconds, higher performance depends on the current workload
and of your hardware. Binary was optimized for Linux (stripped code).<br>
&nbsp; </p>
<p><b>License</b> </p>
<p>The distribution is licensed under the GNU General Public License. <br>
&nbsp; </p>
<p><b>Download the latest release</b> </p>
<p>Currently no documentation and sourcecode available (send me an
email), please read the description above before running bsengine.
Bsengine 1.0.0, statically linked binary only version for linux: <a
 href="data/bsengine-1.0.0_stat_bin.tar.gz">bsengine-1.0.0_stat_bin.tar.gz
[.tgz, 262kb]</a>.<br>
</p>
<p>If you need any further assistance, let me know.<br>
</p>
<p> </p>
<hr width="100%">
<table border="0" cellspacing="0" cellpadding="0" cols="2" width="100%"
 nosave="">
  <tbody>
    <tr nosave="">
      <td width="90%" nosave="">
      <pre style="font-family: times new roman,times,serif;"><i>$Id: bsengine.html,v 1.19 2005/09/27 00:47:03 gloor Exp gloor $<br>Author:</i><i> <a href="mailto:marc_dot_gloor_at_u_dot_nus_dot_edu">marc_dot_gloor_at_u_dot_nus_dot_edu</a></i></pre><br>
      <i> </i> <dt>
      </dt>
      </td>
      <td valign="top" nosave="">
      <div align="right"><i><a href="index.html">home</a></i></div>
      </td>
    </tr>
  </tbody>
</table>
</body>
</html>
@


1.19
log
@*** empty log message ***
@
text
@d90 1
a90 1
me an <a href="mailto:mgloor_at_fhzh_dot_ch">email</a>. <br>
d95 1
a95 1
<tt>written by Marc O. Gloor &lt;mgloor_at_fhzh_dot_ch&gt;</tt> </p>
d246 1
a246 1
      <pre style="font-family: times new roman,times,serif;"><i>$Id: bsengine.html,v 1.18 2004/10/06 19:24:41 gloor Exp gloor $<br>Author:</i><i> <a href="mailto:mgloor_at_fhzh_dot_ch">mgloor_at_fhzh_dot_ch</a></i></pre><br>
@


1.18
log
@*** empty log message ***
@
text
@d90 1
a90 1
me an <a href="mailto:mgloor@@fhzh.ch">email</a>. <br>
d95 1
a95 1
<tt>written by Marc O. Gloor &lt;mgloor@@fhzh.ch&gt;</tt> </p>
d246 1
a246 1
      <pre style="font-family: times new roman,times,serif;"><i>$Id: bsengine.html,v 1.17 2004/02/19 13:57:47 gloor Exp gloor $<br>Author:</i><i> <a href="mailto:mgloor@@fhzh.ch">mgloor@@fhzh.ch</a></i></pre><br>
@


1.17
log
@*** empty log message ***
@
text
@d46 2
a47 3
a part <br>
of a huge batch processing concept. If you like to hack a Gtk+ frontend
around the kernel, fell free! </p>
d246 1
a246 1
      <pre style="font-family: times new roman,times,serif;"><i>$Id:$<br>Author:</i><i> <a href="mailto:mgloor@@fhzh.ch">mgloor@@fhzh.ch</a></i></pre><br>
@


1.16
log
@..
@
text
@d6 1
a6 1
  <meta name="Author" content="Marc O. Gloor">
d246 4
a249 3
      <td width="90%" nosave=""> <dt> <i>$Id: bsengine.html,v 1.15
2003/03/08 18:22:57 gloor Exp gloor $</i></dt>
      <dt> <i>Author: <a href="mailto:mgloor@@fhzh.ch">mgloor@@fhzh.ch</a></i></dt>
a254 6
    <tr>
      <td><br>
      </td>
      <td><br>
      </td>
    </tr>
@


1.15
log
@*** empty log message ***
@
text
@d1 1
a1 1
<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
d4 6
a9 4
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="Marc O. Gloor">
   <meta name="GENERATOR" content="Mozilla/4.73 [en] (X11; I; Linux 2.2.17 i686) [Netscape]">
   <title>bsengine - black/scholes derivative option pricing engine </title>
d11 40
a50 5
<body text="#000000" bgcolor="#FFFFFF" link="#0000EF" vlink="#51188E" alink="#FF0000">
<b><font size=+1>bsengine
- a derivative option pricing engine</font></b>
<br>black/scholes kernel, CLI interface
<br>by Marc O. Gloor
d52 80
a131 98
<hr WIDTH="100%">
<p><img SRC="data/bs.png" ALT="screenshot of bsengine" HSPACE=5 NOSAVE height=342 width=492 align=RIGHT>
<p><b>Abstract</b>
<p>Bsengine computes the fair value of european style options based on
the current stock price. Aditionally, it will display several informations
like greeks, spread or breakeven. It uses the option pricing algorithm
of Black, F. and Scholes, M,&nbsp; the architects of the option pricing
model. The software was developped on a SUN workstation and it was primary
designed for running on RISC or SPARC architectures running the Linux operating
system. However, the author has built this software successfully on Windoze,
but just for testing purposes and not for productional use because of well
known operating system deficits.
<br>&nbsp;
<p><b>Design goal</b>
<p>Initial reason for writing this software was my personal requirement
that I needed a software which should be able to receive data from a stock
exchange server which can be used for recruiting warrants considering my
personal and individual risk profile. An additional design goal was that
the system should be independent of slow represented online banking websites
containing advertisements and other crap. Third and most important reason
for writing the software was the cognition of finding inconsistent product
informations and miscalculations on the website from my broker. I don't
really trust these kind of online banking systems currently around. Investing
my money trusting my own calculations is the way I like. Bsengine was typically
designed for industrial processing of batch data e.g. to compute and populate
a broker website automatically (e.g. similar like Swissquote or Consors
sites). The bsengine kernel includes a plain CLI interface and the system
was designed to be modular and fast. An advantage of this concept is that
the software can be used unattended as a part of a huge batch processing
concept. If you like to hack a Gtk+ frontend around the kernel, fell free!
<p>Once the mathematical calculation based on a complex derivative option
pricing model has been finished, bsengine will write its results to stdout(),
usually to the screen. It depends on how the software is integrated in
the batch processing model, which means, that the token separated standard
output string given from bsengine can be feeded into a relational database
management system (RDMBS) normally for post processing purposes (e.g. mySQL).
I wrote an additional application called bscat (black/scholes catalog)
which reads stdout from bsengine via Unix pipe into stdin and prepares
the output of bsengine in a human readable format.
<br>&nbsp;
<p><b>Technical notes</b>
<p>The bsengine kernel and bscat was fully written in C and should be easaly
portable to other Unix environments or operating systems which supports
pipes. I developped the software on a SUN Sparc 5 running GNU/Linux. To
compute the implied volatility, a fast approximation formula was required.
I use the "Newton-Raphson" algorithm to numerically determing the volatility
of an option using the generalized Black-Scholes model, given its market
price. The "Manaster and Koehler" algorithm is responsible for the initial
value used for iterations, this is the main reason, that bsengine is very
fast in computing option prices. Bsengine was tested hours and hours by
feeding in real time data from a trading software. This software is ready
for productional use possibly, please note that the bsengine package was
published under the terms of the <a href="http://www.opensource.org">GNU
General Public License</a> which clearly implies, that this software comes
without any warranty.
<br>&nbsp;
<p><b>Future plans and additional feautures</b>
<p>Basically, no software is finished and bsengine is an early release
of my current development source tree of bsengine, in other words it's
a WIP (work in progress) release. I plan to expand the capabilites of bsengine
a soon I get access to a free or favourable stock exchange interface. To
find an adequate offer is a real problem and this is the main reason why
I didn't expanded the source. I don't like to pay thousands of Euros per
year just for getting access to time delayed stock quotes. Computing option
prices has to be in real-time. However, current status of bsengine is that
the software is fast and well working. If you have any suggestions, comments
or contributions, feel free to get in touch with me by sending me an <a href="mailto:mgloor@@fhzh.ch">email</a>.
<br>&nbsp;
<p><b>Examples of bsengine and bscat in action</b>
<p><tt>gloor@@node1$ ./bsengine -h</tt>
<br><tt>bsengine 1.0.0 - Black/Scholes Option pricing (UNIX)</tt>
<br><tt>written by Marc O. Gloor &lt;mgloor@@fhzh.ch></tt>
<p><tt>&nbsp;usage&nbsp; : bsengine [options] [arguments]</tt>
<br><tt>&nbsp;example: bsengine -v c 6024.2 8000 4.0 20.10.2002 500 0.02
0.03</tt>
<p><tt>&nbsp;options are:</tt>
<br><tt>&nbsp; -h&nbsp; show help&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-v&nbsp; compute priced volatility</tt>
<br><tt>&nbsp; -r&nbsp; show release&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-p&nbsp; compute fair price</tt>
<p><tt>&nbsp;-v arguments are (in correct order):&nbsp;&nbsp; -p arguments
are (in correct order):</tt>
<br><tt>&nbsp; -1st&nbsp; Call/Put flag [c/p]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-1st&nbsp; Call/Put flag [c/p]</tt>
<br><tt>&nbsp; -2nd&nbsp; Underlying price [dec]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-2nd&nbsp; Underlying price [dec]</tt>
<br><tt>&nbsp; -3rd&nbsp; Strike price [dec]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-3rd&nbsp; Strike price [dec]</tt>
<br><tt>&nbsp; -4th&nbsp; Interest Rate in % [dec]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-4th&nbsp; Interest Rate in % [dec]</tt>
<br><tt>&nbsp; -5th&nbsp; T.t. Maturity [dd.mm.yyyy]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-5th&nbsp; T.t. Maturity [dd.mm.yyyy]</tt>
<br><tt>&nbsp; -6th&nbsp; Options ratio [dec]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-6th&nbsp; Options ratio [dec]</tt>
<br><tt>&nbsp; -7th&nbsp; Bid price [dec]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-7th&nbsp; Given volatility in % [dec]</tt>
<br><tt>&nbsp; -8th&nbsp; Ask price [dec]</tt>
<br>&nbsp;
d133 5
a137 5
relational database using following command:
<br><tt>gloor@@node1$ ./bsengine -v c 6024.2 8000 4.0 20.10.2002 500 0.02
0.02</tt>
<p>Here is an example of the semicolon separated data output:
<br><tt>22-09-2002;20:08:12;C;6024.20;8000.00;500;28;4.0%;0.03;55.63%;-24.7%;...</tt>
d139 122
a260 103
for generating a website using a CGI script):
<p><tt>gloor@@node1$ bsengine -v c 6024.2 8000 4.0 20.10.2002 500 0.02 0.03
| bscat</tt>
<br><tt>&nbsp;+---------------------------------------------------------------------------+</tt>
<br><tt>&nbsp;| Date: 22-09-2002 | Time: 20:09:08&nbsp;&nbsp; | Rate: 4.0%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
| TTM: 28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</tt>
<br><tt>&nbsp;|------------------+------------------+------------------+------------------|</tt>
<br><tt>&nbsp;| Share: 6024.20&nbsp;&nbsp; | Strk: 8000.00&nbsp;&nbsp;&nbsp;
| Ratio: 500&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Type: C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|</tt>
<br><tt>&nbsp;|------------------+------------------+------------------+------------------|</tt>
<br><tt>&nbsp;| I-Val: 0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | T-Val: 0.03&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
| Price: 0.03&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | InOut: -24.7%&nbsp;&nbsp;&nbsp;
|</tt>
<br><tt>&nbsp;|------------------+------------------+------------------+------------------|</tt>
<br><tt>&nbsp;| Prem: 33.05%&nbsp;&nbsp;&nbsp;&nbsp; | Pre/Y: 1179.91%&nbsp;
| Sprd: 33.3%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | SprdM: 119.8&nbsp;&nbsp;&nbsp;&nbsp;
|</tt>
<br><tt>&nbsp;|------------------+------------------+------------------+------------------|</tt>
<br><tt>&nbsp;| Delta: 0.04&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Gear: 401.61&nbsp;&nbsp;&nbsp;&nbsp;
| Omega: 16.77&nbsp;&nbsp;&nbsp;&nbsp; | Vola: 55.63%&nbsp;&nbsp;&nbsp;&nbsp;
|</tt>
<br><tt>&nbsp;|------------------+------------------+------------------+------------------|</tt>
<br><tt>&nbsp;| Gamma: 0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Theta: -1.52&nbsp;&nbsp;&nbsp;&nbsp;
| Vega: 1.50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Rho: 0.18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|</tt>
<br><tt>&nbsp;|------------------+------------------+------------------+------------------|</tt>
<br><tt>&nbsp;| B/E: 8015.00&nbsp;&nbsp;&nbsp;&nbsp; | Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
| Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
| Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|</tt>
<br><tt>&nbsp;|------------------+------------------+------------------+------------------|</tt>
<br><tt>&nbsp;| Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
| Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
| Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
| Empty&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
|</tt>
<br><tt>&nbsp;+---------------------------------------------------------------------------+</tt>
<br>&nbsp;
<p>Data field description:
<p><tt>Date:&nbsp;&nbsp; timestamp date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Pre/Y:&nbsp; premium per annum</tt>
<br><tt>Time:&nbsp;&nbsp; timestamp time&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Sprd:&nbsp;&nbsp; spread</tt>
<br><tt>Rate:&nbsp;&nbsp; interest rate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SprdM:&nbsp; spread Move</tt>
<br><tt>TTM:&nbsp;&nbsp;&nbsp; time to maturity&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Delta:&nbsp; delta</tt>
<br><tt>Share:&nbsp; share price&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gear:&nbsp;&nbsp; gearing</tt>
<br><tt>Strk:&nbsp;&nbsp; options strike price&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Omega:&nbsp; omega</tt>
<br><tt>Ratio:&nbsp; options ratio&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Vola:&nbsp;&nbsp; implied volatility</tt>
<br><tt>Type:&nbsp;&nbsp; type (Call/Put)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gamma:&nbsp; gamma</tt>
<br><tt>I-Val:&nbsp; internal value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Theta:&nbsp; theta</tt>
<br><tt>T-Val:&nbsp; time value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Vega:&nbsp;&nbsp; vega</tt>
<br><tt>Price:&nbsp; Options faire price&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Rho:&nbsp;&nbsp;&nbsp; rho</tt>
<br><tt>InOut:&nbsp; In/Out of the money&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
B/E:&nbsp;&nbsp;&nbsp; break even</tt>
<br><tt>Prem:&nbsp;&nbsp; premium</tt>
<br>&nbsp;
<p><b>Benchmark</b>
<p>The result of a computing simulation of 20'000 options prices was displayed
in seconds, higher performance depends on the current workload and of your
hardware.
<br>&nbsp;
<p><b>License</b>
<p>The distribution is licensed under the GNU General Public License.
<br>&nbsp;
<p><b>Download the latest release</b>
<p>Currently no documentation and sourcecode available, please read the
description above carefully before running bsengine or investing money
using the software. Bsengine 1.0.0, statically linked binary only version
for linux:
<a href="data/bsengine-1.0.0_stat_bin.tar.gz">bsengine-1.0.0_stat_bin.tar.gz
[.tgz, 262kb]</a>.
<p>
<hr WIDTH="100%">
<table BORDER=0 CELLSPACING=0 CELLPADDING=0 COLS=2 WIDTH="100%" NOSAVE >
<tr NOSAVE>
<td WIDTH="90%" NOSAVE>
<dt>
<i>$Id: bsengine.html,v 1.14 2003/02/20 18:02:00 gloor Exp gloor $</i></dt>

<dt>
<i>Author: <a href="mailto:mgloor@@fhzh.ch">mgloor@@fhzh.ch</a></i></dt>
</td>

<td VALIGN=TOP NOSAVE>
<div align=right><i><a href="index.html">home</a></i></div>
</td>
</tr>

<tr>
<td></td>

<td></td>
</tr>
a261 1

@


1.14
log
@*** empty log message ***
@
text
@d191 1
a191 1
<p><b>License</b><b></b>
d199 2
a200 2
<a href="data/bsengine-1.0.0_statbin.tar.gz">bsengine-1.0.0_statbin.tar.gz
[.tgz, 290kb]</a>.
d207 2
a208 1
<i>$Id$</i></dt>
d211 2
@


1.13
log
@revised
@
text
@d207 3
a209 4
<i>$Id: bsengine.html,v 1.12 2003/02/13 22:38:40 gloor Exp gloor $</i></dt>

<br><i>Author: <a href="mailto:mgloor@@fhzh.ch">mgloor@@fhzh.ch</a></i></td>

@


1.12
log
@save of today's work
@
text
@d207 1
a207 1
<i>$Id: bsengine.html,v 1.11 2003/01/31 22:59:57 gloor Exp gloor $</i></dt>
d209 1
a209 1
<br><i>Author: <a href="mailto:mgloor@@fhzh.ch">Marc O. Gloor</a></i></td>
@


1.11
log
@*** empty log message ***
@
text
@d11 3
a13 2
- derivative option pricing engine</font></b>
<br>black/scholes kernel, CLI interface, by Marc O. Gloor
d16 1
a16 1
<p><img SRC="data/bs.png" HSPACE=5 NOSAVE height=342 width=492 align=RIGHT>
d36 9
a44 9
informations and misscalculations on the website of my online bank. I really
don't trust these kind of online banking systems currently around. Investing
my money trusting my own calculations is more difficult to programming
but more secure as well. Bsengine was typically designed for industrial
processing of batch data e.g. for calculating and populating a trading
website automatically. The bsengine kernel uses a plain CLI interface and
the system was designed to be modular and fast. An advantage of this concept
is that the software can be used unattended as a part of a huge batch processing
concept.
d49 2
a50 2
output string given from bsengine can be feeded in to a relational database
management system normally for post processing purposes (e.g. mySQL RDBMS).
d56 1
a56 1
<p>The bsengine kernel and bscat was fully written in C and should be easy
d59 1
a59 1
compute the implied volatility, a fast approximation formula is required.
d63 5
a67 4
value used for iterations. Bsengine is very fast and was tested hours and
hours by feeding in the software with real time data from a banking system.
This software is ready for productional use possibly, please note that
the bsengine package was published under the terms of the <a href="http://www.opensource.org">GNU
d72 10
a81 10
<p>Basically, this software is not finished and an early release of my
current development source tree of bsengine, in other words it's a WIP
(work in progress) release. I plan to expand the capabilites of bsengine
a soon I get access to a real time data distributor of stock prices FOR
FREE or at least&nbsp; for a few Dollars per month, this is a real problem
for me and the reason why I don't expand the source currently. I don't
like to pay thousands of Euros per year just for getting access to time
delayed stock quotes. However, current status of bsengine is that the software
is fast and well working. If you have suggestions, comments or contributions,
feel free to get in touch with me by sending me an <a href="mailto:mgloor_removespam@@freesurf.ch">email</a>.
d86 1
a86 1
<br><tt>written by Marc O. Gloor &lt;marc.gloor@@pobox.ch></tt>
a116 1
<br><tt></tt>&nbsp;<tt></tt>
a118 1
<br>&nbsp;
d186 8
d198 3
a200 3
for linux [~290Kb]:
<a href="data/bsengine-1.0.0_statbin.tar.gz">bsengine-1.0.0_statbin.tar.gz</a>
<br>&nbsp;
d207 1
a207 1
<i>$Id: bsengine.html,v 1.10 2003/01/21 13:29:05 gloor Exp gloor $</i></dt>
d209 1
a209 1
<br><i>Author: <a href="mailto:mgloor_removespam@@freesurf.ch">Marc O. Gloor</a></i></td>
@


1.10
log
@misc
@
text
@d111 7
a117 3
<p>Here is an example of the standardized output:
<p><tt>gloor@@node1$ ./bsengine -v c 6024.2 8000 4.0 20.10.2002 500 0.02
0.02 22-09-2002;20:08:12;C;6024.20;8000.00;500;28;4.0%;0.03;55.63%;-24.7%;...</tt>
d119 2
a120 1
<p>Here is an example of the bsengine and bscat working together:
d199 1
a199 1
<i>$Id: bsengine.html,v 1.9 2002/10/24 20:31:53 gloor Exp gloor $</i></dt>
@


1.9
log
@bugs fixed
@
text
@d55 5
a59 5
<p>The bsengine kernel and bscat was written in C and should be fully portable
to other Unix environments or operating systems which supports pipes. I
developped the software on a SUN Sparc 5 running GNU/Linux. To compute
the implied volatility, a fast approximation formula is required. I use
the "Newton-Raphson" algorithm to numerically determing the volatility
d194 1
a194 1
<i>$Id: bsengine.html,v 1.8 2002/10/15 20:41:07 gloor Exp gloor $</i></dt>
@


1.8
log
@jpg image replaced with a png pendant
@
text
@d22 4
a25 4
designed for running on fast RISC or SPARC architectures running the Linux
operating system. However, the author has built this software successfully
on Windoze, but just for testing purposes and not for productional use
because of well known operating system deficits.
d194 1
a194 1
<i>$Id: bsengine.html,v 1.7 2002/10/13 13:19:37 gloor Exp gloor $</i></dt>
@


1.7
log
@revised
@
text
@d15 1
a15 1
<p><img SRC="data/bs.gif" HSPACE=5 NOSAVE height=342 width=492 align=RIGHT>
d194 1
a194 1
<i>$Id: bsengine.html,v 1.6 2002/10/06 21:01:11 gloor Exp gloor $</i></dt>
@


1.6
log
@misc fixes, content revised
@
text
@d17 9
a25 8
<p>Bsengine computes the fair value of european style options from its
given market price. It uses the option pricing model algorithm of Black,
F. and Scholes, M,&nbsp; the architects of the option pricing algorithm.
The software was developped on a SUN workstation running Linux and it was
primary designed for running on RISC or SPARC Unix workstations running
Linux. However, the author has built this software successfully on Windoze,
but just for testing purposes and not for productional use because of well
known architectural operating-system deficits.
d29 2
a30 2
that I need a software which should be able to receive data from a stock
exchange server which can be used for recruiting warrants considering a
d32 12
a43 11
my system should be independent of slow represented trading websites containing
advertisements and other crap. Third and most important reason for writing
the software was the cognition of finding inconsistent product informations
and misscalculations on the website of my online bank. I really don't trust
these kind of online banking systems currently around. Investing my money
trusting my own calculations is more difficult to implement but a also
more secure way. Bsengine was typically designed for industrial processing
of batch data e.g. for calculating and populating a trading website automatically.
The bsengine kernel uses a plain CLI interface and the system was designed
to be modular and fast. An advantage of this concept is that the software
can be used unattended as a part of a batch processing concept.
d194 1
a194 1
<i>$Id: bsengine.html,v 1.5 2002/10/06 19:51:06 gloor Exp $</i></dt>
@


1.5
log
@revised, bugs fixed
@
text
@d15 1
a15 1
<p><img SRC="bs.gif" HSPACE=5 height=342 width=492 align=RIGHT>
d192 1
a192 1
<i>$Id: bsengine.html,v 1.4 2002/10/06 19:42:51 gloor Exp $</i></dt>
@


1.4
log
@general website revision, several things added
@
text
@d12 1
a12 1
<br>black/scholes kernel, CLI interface
d192 1
a192 1
<i>$Id: bsengine.html,v 1.3 2002/09/22 20:00:27 gloor Exp $</i></dt>
@


1.3
log
@bugs fixed
@
text
@d15 2
a16 1
<p><b>What is bsengine</b>
d19 30
a48 14
F. and Scholes, M,&nbsp; the architects of the option pricing algorithm
(nobel price).
<br><b></b>&nbsp;<b></b>
<p><b>Design goal</b><b></b>
<p>Main goal of this software was the idea to feed in bsengine with real
time data from a stock exchange for later comparing the values and greeks
in a automated way for recruiting interesting derivate products. Because
one of the design goal was a modular system, the bsengine kernel has a
commandline interface (CLI) so bsengine is able to run unattended in shellscripts
scheduled via crontab for example. It was also designed for calculating
thousands of options prices (e.g. for populating a website with the newest
values every time its requested), therefore the output of bsengine is a
token separated string which can be used for database input (e.g. mySQL).
<p>I wrote an additional application called bscat (black/scholes catalog)
d51 30
a80 19
<p>The bsengine kernel and bscat is written in C and fully portable to
other Unix environments or operating systems which supports pipes. I developped
the software on a SUN Sparc 5 running GNU/Linux. To compute the implied
volatility, a fast approximation formula is required. I use the "Newton-Raphson"
algorithm to numerically determing the volatility of an option using the
generalized Black-Scholes model, given its market price. The "Manaster
and Koehler" algorithm is responsible for the initial value used for iterations.
Bsengine is very fast and was tested hours and hours by feeding in the
software with real time data from a banking system.
<br>&nbsp;
<p><b>Future plans</b><b></b>
<p>I plan to expand the capabilites of bsengine a soon I have access to
a real time data distributor of stock prices, then I'm able to add new
features, at the moment, further development is stopped. Current status
is that bsengine is fast and well working.
<br>&nbsp;
<p><b>Examples</b><b></b>
<p>An overview over the features:
<blockquote><tt>gloor@@node1$ ./bsengine -h</tt>
d107 9
a115 10
<br><tt>&nbsp; -8th&nbsp; Ask price [dec]</tt></blockquote>

<p><br>Here is an example of the standardized output:
<blockquote><tt>gloor@@node1$ ./bsengine -v c 6024.2 8000 4.0 20.10.2002
500 0.02 0.03</tt>
<br><tt>22-09-2002;20:08:12;C;6024.20;8000.00;500;28;4.0%;0.03;55.63%;-24.7%;...</tt></blockquote>

<p><br>Here is an example of the bscat application:
<blockquote><tt>gloor@@node1$ ./bsengine -v c 6024.2 8000 4.0 20.10.2002
500 0.02 0.03 | ./bscat</tt>
d150 34
a183 4
<br><tt>&nbsp;+---------------------------------------------------------------------------+</tt></blockquote>

<p><br><b>Download the latest bsengine release</b>
<p>Bsengine 1.0.0, statically linked binary version for linux [~290Kb]:
d192 1
a192 1
<i>$Id: bsengine.html,v 1.2 2002/09/22 19:56:36 gloor Exp $</i></dt>
@


1.2
log
@site revised
@
text
@d20 2
a21 4
<p>It was designed for calculating thousands of options prices (e.g. for
populating a website with the newest values every time its requested),
therefore the output of bsengine is a token separated string which can
be used for database input (e.g. mySQL).
d27 4
a30 1
scheduled via crontab for example.
d43 2
d49 3
a51 1
<p>Here's an example of bsengine in action:
d135 1
a135 1
<i>$Id: bsengine.html,v 1.1 2002/09/22 19:07:08 gloor Exp gloor $</i></dt>
@


1.1
log
@Initial revision
@
text
@d35 7
a41 3
the software on a SUN Sparc 5 running GNU/Linux. Bsengine is very fast
and was tested hours and hours by feeding in the software with real time
data from a banking system.
d130 1
a130 1
<i>$Id: empty.html,v 1.2 2002/09/21 07:35:00 gloor Exp gloor $</i></dt>
@
